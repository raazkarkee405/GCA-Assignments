[{"/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/index.js":"1","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/App.js":"2","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/reportWebVitals.js":"3","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/routes.js":"4","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/components/Home/home.js":"5","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/services/firebase.js":"6","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/components/Layouts/appbar.js":"7","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/components/TodoList/note-list.js":"8","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/components/TodoList/note-management.js":"9","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/components/TodoList/config.js":"10"},{"size":500,"mtime":1608868985406,"results":"11","hashOfConfig":"12"},{"size":871,"mtime":1609220864580,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1608868985406,"results":"14","hashOfConfig":"12"},{"size":677,"mtime":1609140333502,"results":"15","hashOfConfig":"12"},{"size":276,"mtime":1609159637126,"results":"16","hashOfConfig":"12"},{"size":530,"mtime":1609137825915,"results":"17","hashOfConfig":"12"},{"size":3974,"mtime":1609150875507,"results":"18","hashOfConfig":"12"},{"size":10246,"mtime":1609726064941,"results":"19","hashOfConfig":"12"},{"size":1653,"mtime":1609721903164,"results":"20","hashOfConfig":"12"},{"size":31,"mtime":1609204363924,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"11id55z",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/index.js",[],["48","49"],"/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/App.js",["50"],"import React, {useEffect, useState} from 'react'\nimport './App.css'\nimport {createMuiTheme, MuiThemeProvider} from '@material-ui/core/styles'\nimport {CircularProgress, CssBaseline} from '@material-ui/core'\nimport firebase from './services/firebase'\nimport Routes from './routes'\n\nconst theme = createMuiTheme()\n\nfunction App() {\n\n    const [firebaseInitialized, setFirebaseInitialized] = useState(false)\n\n    const isInitialized = () => {\n      return new Promise(resolve => {\n        firebase.auth().onAuthStateChanged(resolve)\n      })\n    }\n\n    useEffect(() => {\n      isInitialized().then(val => {\n        setFirebaseInitialized(val)\n      })\n    })\n\n    return firebaseInitialized != false ? (\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Routes />\n      </MuiThemeProvider>\n    ) : <div><CircularProgress /></div>\n}\n\nexport default App;\n","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/reportWebVitals.js",[],"/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/routes.js",["51"],"import React, { Component } from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from 'react-router-dom'\nimport Home from './components/Home/home'\n\nexport default class Routes extends Component {\n    render() {\n        return (\n            <div>\n                <Router>\n                    <Switch>\n                        //Route path \n                        {/* <Route path=\"/\" exact component={SignIn} />\n                        <Route path=\"/register\" exact component={Register} /> */}\n                        <Route path=\"/home\" exact component={Home} />\n                    </Switch>\n                </Router>\n            </div>\n        )\n    }\n}","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/components/Home/home.js",["52"],"import React, { useState } from 'react'\nimport SearchAppBar from '../Layouts/appbar'\nimport NoteList from '../TodoList/note-list'\n\nfunction Home() {\n\n    return (\n        <div>\n            <SearchAppBar />\n\n            <NoteList />\n        </div>\n    )\n}\n\nexport default Home\n","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/services/firebase.js",[],"/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/components/Layouts/appbar.js",["53","54"],"import React, {useState} from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { Drawer } from '@material-ui/core';\nimport { AccountBox, ExitToApp, ListAltRounded } from '@material-ui/icons';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  header: {\n    backgroundColor: \"transparent\",\n    color: \"black\",\n    boxShadow: \"0px 0px 0px 0px\"\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '12ch',\n      '&:focus': {\n        width: '20ch',\n      },\n    },\n  },\n  list: {\n    width: 250,\n  }\n}));\n\nexport default function SearchAppBar() {\n  const classes = useStyles();\n\n  const [drawer, setDrawer] = useState(false)\n\n  const toggleDrawer = (open) => (event) => {\n    console.log(open)\n    setDrawer(open)\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"sticky\" className={classes.header}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"app\"\n            onClick={toggleDrawer(true)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Mr. Note\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Searchâ€¦\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        anchor='left'\n        open={drawer}\n        onClose={toggleDrawer(false)}\n      >\n        <div onClick={toggleDrawer(false)}>\n       <List className={classes.list}>\n        <p>Name</p>\n      </List>\n      <Divider />\n      <List>\n        {['Todo', 'Account', 'Logout'].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>{index == 0 ? <ListAltRounded /> : index == 2 ? <ExitToApp /> : <AccountBox />}</ListItemIcon>\n            <ListItemText primary={text} />\n          </ListItem>\n        ))}\n       \n      </List>\n    </div>\n      </Drawer>\n    </div>\n  );\n}\n","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/components/TodoList/note-list.js",["55"],"import React, { useState, useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport firebase from '../../services/firebase';\nimport {createNote, updatingNote, getNoteList, deletingNote} from './note-management';\nimport { CircularProgress, Snackbar } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport EditRoundedIcon from '@material-ui/icons/EditRounded';\nimport DeleteRoundedIcon from '@material-ui/icons/DeleteRounded';\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport Alert from '@material-ui/lab/Alert/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n    addIcon: {\n        position: 'absolute',\n        bottom: 40,\n        right: 40,\n        \n    },\n    card: {\n        margin: 20,\n        minWidth: 275\n       \n    },\n    title: {\n        fontSize: 20,\n      },\n      pos: {\n        marginBottom: 12,\n      },\n  }));\n  \n\nfunction NoteList() {\n    const classes = useStyles();\n\n    const [open, setOpen] = useState(false);\n    const [openDelete, setOpenDelete] = useState(false);\n    const [title, setTitle] = useState();\n    const [description, setDescription] = useState();\n    const [deadline, setDeadline] = useState();\n    const [addingNote, setAddingNote] = useState(false);\n    const [updateNote, setUpdateNote] = useState();\n    const [selectedDoc, setSelectedDoc] = useState();\n    const [noteList, setNoteList] = useState([]);\n    const [error,setError]=useState(false);\n    // const [isLoading,setIsLoading]=useState(true);\n   // const [isSaving, setIsSaving] = useState(false);\n\n    const handleClose = () => {\n        setOpen(false);\n        setOpenDelete(false);\n        setError(false);\n    }\n\n    const handleChange = (event) => {\n        if(event.target.id==='title') setTitle(event.target.value);\n        if(event.target.id==='description') setDescription(event.target.value);\n        if(event.target.id==='deadline') setDeadline(event.target.value);\n\n    }\n\n    const twoDigitDateTextMaker = (time) => {\n      let text = time.toString();\n      if (text.toString().length > 1) {\n        return text;\n      } else {\n        return '0' + text;\n      }\n    }\n    \n    const calculateFullDate = (time) => {\n      // Return Type -> DD-MM-YYYYTHH:MM\n      const eventDate = new Date(time);\n      const resDate = twoDigitDateTextMaker(eventDate.getUTCFullYear()) + '-' + twoDigitDateTextMaker(eventDate.getUTCMonth() + 1) + '-' + twoDigitDateTextMaker(eventDate.getUTCDate()) + 'T' + twoDigitDateTextMaker(eventDate.getHours()) + ':' + twoDigitDateTextMaker(eventDate.getMinutes());\n      return resDate;\n    }\n\n    const createTodo = () => {\n        // console.log(title)\n        // console.log(description)\n        // console.log(deadline)\n       // setIsSaving(true);\n        setAddingNote(true);\n        console.log(\"updateNote =\" + updateNote )\n        if(updateNote){\n          let note = {};\n        note.id=updateNote.id;\n        note.title=title;\n        note.description=description;\n        note.deadline=new Date(deadline).getTime();\n        console.log(note)\n        updatingNote(note, note.id).then(response => {\n            console.log(response);\n            setAddingNote(false);\n            setOpen(false);\n        }).catch(error => {\n            setAddingNote(false);\n            setError(true);\n        })\n        }else{\n        let notes = {};\n        notes.title=title;\n        notes.description=description;\n        notes.deadline=new Date(deadline).getTime();\n        console.log(notes);\n        createNote(notes).then(response => {\n            console.log(response);\n            setAddingNote(false);\n            setOpen(false);\n        }).catch(error => {\n            setAddingNote(false);\n            setError(true);\n        })\n      }\n    }\n\n    const onDeleteItem = () => {\n      deletingNote(selectedDoc);\n      setOpenDelete(false)\n    }\n\n    const onSelectDocForDelete = (id) => {\n      console.log(id)\n      setSelectedDoc(id);\n      setOpenDelete(true);\n    }\n\n\n    // function getTodos() {\n    //     firebase.firestore().collection('todo-list').onSnapshot(function (querySnapshot){\n    //         setNoteList(\n    //             querySnapshot.docs.map((doc) => ({\n    //                 title: doc.data().title,\n    //                 description: doc.data().description,\n    //                 deadline: doc.data().deadline,\n    //                 id: doc.data().id,\n    //             }))\n    //         )\n    //     })\n    // }\n\n    // useEffect(() => {\n    //    getTodos();\n    // }, [true])\n\n    \n\n    useEffect(()=>{\n      // console.log(getNoteList())\n      //   getNoteList().then(res => {\n      //     // console.log(res)\n      //       setNoteList(res);\n      //       // console.log(noteList)\n      //       setIsLoading(false);\n      //   });\n        const db = firebase.firestore();\n        return db.collection('todo-list').onSnapshot(snapshot => {\n          const notesData = [];\n          snapshot.forEach(doc => notesData.push({...doc.data(), id: doc.id}))\n          console.log(notesData)\n          setNoteList(notesData)\n      })\n    },[]);\n\n    return (\n        <div>\n            <div className={classes.card}>\n              <Grid container spacing={3}>\n                \n                {noteList.map((item) =>\n                    <Grid item xs={4}>\n                     <Card>\n                     <CardContent>\n                     <Typography className={classes.title} color=\"textPrimary\" gutterBottom>\n                        {item.title} \n                        </Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                        {item.description}\n                        </Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>\n                        Deadline: {calculateFullDate(item.deadline)}\n                        </Typography>\n                     <CardActions>\n                     \n                     <Fab color=\"primary\" aria-label=\"edit\" onClick={(event) =>{\n                       setUpdateNote(item);\n                       setTitle(item.title);\n                       setDescription(item.description);\n                       setDeadline(calculateFullDate(item.deadline));\n                       setOpen(true);\n                     }}\n                     >\n                     <EditRoundedIcon />\n                      </Fab>\n                      <Fab color=\"secondary\" aria-label=\"delete\" onClick={()=>onSelectDocForDelete(item.id)} >\n                     <DeleteRoundedIcon />\n                      </Fab>\n                  \n                     </CardActions>\n                     </CardContent> \n                 </Card>\n                 </Grid>\n                )}\n                \n              </Grid>\n            </div>\n                \n            <Dialog\n        open={openDelete}\n        onClose={handleClose}\n        aria-labelledby=\"draggable-dialog-title\"\n      >\n        <DialogTitle style={{ cursor: 'move' }} id=\"draggable-dialog-title\">\n        Are you sure you want to delete??\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            You cannot undo this action\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={handleClose} color=\"primary\">\n            Disagree\n          </Button>\n          <Button onClick={onDeleteItem} color=\"primary\">\n            Agree\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n\n            <div className={classes.root}></div>\n            <Fab color=\"primary\" aria-label=\"add\" className={classes.addIcon} onClick={()=>setOpen(true)}>\n             <AddIcon />\n             </Fab>\n             \n             <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\"></DialogTitle>\n        {addingNote ? <CircularProgress />:\n            <DialogContent>\n            <DialogContentText>\n            </DialogContentText>\n            <TextField\n              autoFocus\n              onChange={handleChange}\n              margin=\"dense\"\n              id=\"title\"\n              label=\"Enter Title\"\n              type=\"text\"\n              value={title}\n              fullWidth\n            />\n            <TextField\n              onChange={handleChange}\n              margin=\"dense\"\n              id=\"description\"\n              label=\"Enter Description\"\n              type=\"text\"\n              value={description}\n              fullWidth\n            />\n\n            <TextField\n            value={deadline}\n            // onChange={(event) => date = event.target.value}\n            onChange={handleChange}\n            id=\"deadline\"\n            label=\"Deadlline\"\n            type=\"datetime-local\"\n            // defaultValue=\"2020-05-16T18:30\"\n            // className={classes.textField}\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n            </DialogContent>\n        }\n        {addingNote ? '' : <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={createTodo} color=\"primary\">\n            Save\n          </Button>\n        </DialogActions>\n        }\n      </Dialog>\n        <Snackbar open={error} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                Cannot add note at this time\n            </Alert>\n        </Snackbar>\n        </div>\n    )\n}\n\nexport default NoteList\n","/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/components/TodoList/note-management.js",[],"/home/raaz/Genese-ReactJs/Assignments/todoapp-react-firebase/src/components/TodoList/config.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":26,"column":32,"nodeType":"62","messageId":"63","endLine":26,"endColumn":34},{"ruleId":"64","severity":1,"message":"65","line":14,"column":29,"nodeType":"66","endLine":16,"endColumn":25},{"ruleId":"67","severity":1,"message":"68","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":25},{"ruleId":"60","severity":1,"message":"71","line":135,"column":34,"nodeType":"62","messageId":"63","endLine":135,"endColumn":36},{"ruleId":"60","severity":1,"message":"71","line":135,"column":68,"nodeType":"62","messageId":"63","endLine":135,"endColumn":70},{"ruleId":"67","severity":1,"message":"72","line":13,"column":35,"nodeType":"69","messageId":"70","endLine":13,"endColumn":46},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","Expected '===' and instead saw '=='.","'getNoteList' is defined but never used.","no-global-assign","no-unsafe-negation"]